// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length;
    field int maxLength;
    field Array chars;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLen) {
        if(maxLen = 0) { let maxLen = 1;}

        let chars = Array.new(maxLen);
        let maxLength = maxLen;
        let length = 0;

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do chars.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(length < maxLength) {
            let chars[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(length > 0){
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var boolean isMinus;
        var int i,d,val;

        let isMinus = (chars[0] = 45);
        let i = 0;
        let d = 0;
        let val = 0;

        if(isMinus) { let i = i + 1;}

        while(i < length){
            let d = chars[i];
            
            if( ~(String.isDigit(d)) ) { return val ;}

            let val = (val * 10) + (d - 48);
            let i = i + 1;
        }

        if(isMinus) {return ~val+1;}

        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;
        
        if (val < 0){
            do appendChar(45);
            let val = Math.abs(val);
        }
        do int2String(val);
        return;
    }

    method void int2String(int val){
        var int digits,lastDigit;
        var char c;

        if(val < 10){
            let c = String.digit2Char(val);
            
            do appendChar(c); 
            
            return;
        }

        /** val=89のとき89/10=8（8.9のうち整数部分のみが返ってくる）となり8*10=80,89-80=9となり%による余りが求められる */
        let digits = val / 10;
        let lastDigit = val - (digits * 10);

        do int2String(digits);
        do appendChar(String.digit2Char(lastDigit));
        
        return;
    }
    
    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    function char digit2Char(int val){
        return val + 48;
    }

    function boolean isDigit(int val){
        return (~(48 > val )) & (~(57 < val));
    }

}
